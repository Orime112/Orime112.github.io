<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Orime112.github.io</id>
    <title>个人小站</title>
    <updated>2020-06-28T05:45:02.867Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Orime112.github.io"/>
    <link rel="self" href="https://Orime112.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Orime112.github.io/images/avatar.png</logo>
    <icon>https://Orime112.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 个人小站</rights>
    <entry>
        <title type="html"><![CDATA[常见面试题总结（四）Css骚操作、图片懒加载，手写promise等]]></title>
        <id>https://Orime112.github.io/post/mianshi/</id>
        <link href="https://Orime112.github.io/post/mianshi/">
        </link>
        <updated>2020-06-23T05:24:04.000Z</updated>
        <content type="html"><![CDATA[<p>🕶☂️🌂😊🤓🥙🥒🚣‍♀🎏🗽<br>
<a name="mcuT8"></a></p>
<h1 id="1-css实现一个扇形">1、Css实现一个扇形</h1>
<ul>
<li>思路：提示一下思路，width和height都设置为0<br>
，border宽度设置为一个固定值，border角度设置和宽度一致，然后上下左右四个反向border-color，设置一个方向的颜色和另外方向的不同即可</li>
</ul>
<pre><code class="language-html">&lt;view class=&quot;shan&quot;&gt;&lt;/view&gt;
  
&lt;style lang=&quot;scss&quot;&gt;
  .shan{
  	width: 0px;
    height: 0px;
    border-width: 50px;
    border-radius: 50px;
    border-color: brow transparent transparent;
  }
&lt;/style&gt;
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/513194/1592365774236-6363bc10-fdfd-4315-b3d0-51b595b05e1c.png#align=left&amp;display=inline&amp;height=109&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=109&amp;originWidth=108&amp;size=1370&amp;status=done&amp;style=none&amp;width=108" alt="image.png" loading="lazy"><br /></p>
<p><a name="CGCi1"></a></p>
<h1 id="2-css-中transition和animate有何区别animate如何停留在最后一帧">2、CSS 中<code>transition</code>和<code>animate</code>有何区别?<code>animate</code>如何停留在最后一帧!</h1>
<hr>
<ul>
<li>顾名思义，  是用来做过渡的，没有时间轴的概念，通过事件触发）（只有一次），没有中间状态。</li>
<li>animate是做动效的，有时间轴的概念，可以重复触发并且拥有中间状态</li>
</ul>
<p><br />过渡的开销比动效小,前者一般用于交互居多,后者用于活动页居多;<br />至于如何让<code>animate</code>停留在最后一帧也好办,就它自身参数的一个值就可以了</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
  &lt;title&gt;animate动画测试&lt;/title&gt;
  &lt;style&gt;
    .test {
      box-sizing: border-box;
      border: 5px solid #f00;
      padding: 5px;
      width: 100px;
      height: 100px;
      position: absolute;
      /* 
      animation属性的简写姿势排序
      animation：名持方延，循方状尾
      animation: name duration timing-function delay iteration-count direction fill-mode;

      @keyframes name 动画名
      duration 持续时间
      timing-function 动画频率
      delay 延迟多久开始
      iteration-count 循环次数
      direction 动画方向，往返还是正向
      fill-mode 一般用来处理停留在某一帧 backwards则停留在首帧,both是轮流
      play-state running 开始， pause 暂停。。。
      */
     animation: moveChangeColor 1s ease 2.5s infinite ;
    }

    @keyframes moveChangeColor {
      from {
        top: 0%;
        left: 5%;
        background-color: #f00;
      }
      to {
        top: 0%;
        left: 50%;
        background-color: #ced;
      }
    }

  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class=&quot;test&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/513194/1592366673486-8a1580ba-2e9a-468d-9762-29091861f52b.png#align=left&amp;display=inline&amp;height=136&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=136&amp;originWidth=670&amp;size=4426&amp;status=done&amp;style=none&amp;width=670" alt="image.png" loading="lazy"><br>
<a name="HY7Q2"></a></p>
<h1 id="3-js实现stringtrim方法">3、JS实现String.trim()方法</h1>
<ul>
<li>trim本质就是在字符串的前后去掉空格</li>
</ul>
<pre><code class="language-html">String.prototype.emuTrim = function() {
	return this.replace(/(^\s*)|(\s*$\)/g, '')
}
</code></pre>
<p><a name="gUlnN"></a></p>
<h1 id="4-virtual-dom-的优势在哪里">4、Virtual Dom 的优势在哪里？</h1>
<p>:::info<br>
「Virtual Dom 的优势」其实这道题目面试官更想听到的答案不是上来就说「直接操作/频繁操作 DOM 的性能差」，如果 DOM 操作的性能如此不堪，那么 jQuery 也不至于活到今天。所以面试官更想听到 VDOM 想解决的问题以及为什么频繁的 DOM 操作会性能差。<br />首先我们需要知道：<br />DOM 引擎、JS 引擎 相互独立，但又工作在同一线程（主线程） JS 代码调用 DOM API 必须 挂起 JS 引擎、转换传入参数数据、激活 DOM 引擎，DOM 重绘后再转换可能有的返回值，最后激活 JS 引擎并继续执行若有频繁的 DOM API 调用，且浏览器厂商不做“批量处理”优化， 引擎间切换的单位代价将迅速积累若其中有强制重绘的 DOM API 调用，重新计算布局、重新绘制图像会引起更大的性能消耗。<br>
:::<br>
:::info<br>
其次是 VDOM 和真实 DOM 的区别和优化：<br>
:::<br>
:::info</p>
<ol>
<li>虚拟 DOM 不会立马进行排版与重绘操作<br /></li>
<li>虚拟 DOM 进行频繁修改，然后一次性比较并修改真实 DOM 中需要改的部分，最后在真实 DOM 中进行排版与重绘，减少过多DOM节点排版与重绘损耗<br /></li>
<li>虚拟 DOM 有效降低大面积真实 DOM 的重绘与排版，因为最终与真实 DOM 比较差异，可以只渲染局部<br /><br>
:::</li>
</ol>
<p><a name="lWoYX"></a></p>
<h1 id="5-js实现图片懒加载">5、JS实现图片懒加载</h1>
<p>有时候一个网页会包含很多的图片，例如淘宝京东这些购物网站，商品图片多只之又多，页面图片多，加载的图片就多。服务器压力就会很大。不仅影响渲染速度还会浪费带宽。比如一个1M大小的图片，并发情况下，达到1000并发，即同时有1000个人访问，就会产生1个G的带宽。<br />为了解决以上问题，提高用户体验，就出现了懒加载方式来减轻服务器的压力，优先加载可视区域的内容，其他部分等进入了可视区域再加载，从而提高性能。<br />vue项目中的打包，是把html、css、js进行打包，还有图片压缩。但是打包时把css和js都分成了几部分，这样就不至于一个css和就是文件非常大。也是优化性能的一种方式。<br />效果动图如下：<br />进入正题------懒加载<br />1.懒加载原理<br />一张图片就是一个<img>标签，浏览器是否发起请求图片是根据<img>的src属性，所以实现懒加载的关键就是，在图片没有进入可视区域时，先不给<img>的src赋值，这样浏览器就不会发送请求了，等到图片进入可视区域再给src赋值。<br />2.懒加载思路及实现<br />实现懒加载有四个步骤，如下：<br />1.加载loading图片<br />2.判断哪些图片要加载【重点】<br />3.隐形加载图片<br />4.替换真图片<br />1.加载loading图片是在html部分就实现的，代码如下：<br />2.如何判断图片进入可视区域是关键。<br />引用网友的一张图，可以很清楚的看出可视区域。<br />如上图所示，让在浏览器可视区域的图片显示，可视区域外的不显示，所以当图片距离顶部的距离top-height等于可视区域h和滚动区域高度s之和时说明图片马上就要进入可视区了，就是说当top-height&lt;=s+h时，图片在可视区。<br />这里介绍下几个API函数：<br />页可见区域宽：document.body.clientWidth;<br />网页可见区域高：document.body.clientHeight;<br />网页可见区域宽：document.body.offsetWidth (包括边线的宽);<br />网页可见区域高：document.body.offsetHeight (包括边线的宽);<br />网页正文全文宽：document.body.scrollWidth;<br />网页正文全文高：document.body.scrollHeight;<br />网页被卷去的高：document.body.scrollTop;<br />网页被卷去的左：document.body.scrollLeft;<br />网页正文部分上：window.screenTop;<br />网页正文部分左：window.screenLeft;<br />屏幕分辨率的高：window.screen.height;<br />屏幕分辨率的宽：window.screen.width;<br />屏幕可用工作区高度：window.screen.availHeight;<br />HTMLElement.offsetTop 为只读属性，它返回当前元素相对于其 offsetParent 元素的顶部的距离。<br />window.innerHeight：浏览器窗口的视口（viewport）高度（以像素为单位）；如果有水平滚动条，也包括滚动条高度。<br />具体实现的js代码为：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/513194/1592367450299-42f2feba-7781-4c7d-91b0-499480166dcf.png#align=left&amp;display=inline&amp;height=174&amp;margin=%5Bobject%20Object%5D&amp;originHeight=800&amp;originWidth=642&amp;size=0&amp;status=done&amp;style=none&amp;width=140" alt="" loading="lazy"><br />效果如下：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/513194/1592367450323-9a1269a2-3e5f-48a7-b678-290fece360bf.png#align=left&amp;display=inline&amp;height=82&amp;margin=%5Bobject%20Object%5D&amp;originHeight=466&amp;originWidth=800&amp;size=0&amp;status=done&amp;style=none&amp;width=140" alt="" loading="lazy"><br />随着鼠标向下滚动，其余图片也逐渐显示并发起请求。<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/513194/1592367450272-16c3e75c-99d2-4843-982a-9151c7822163.png#align=left&amp;display=inline&amp;height=70&amp;margin=%5Bobject%20Object%5D&amp;originHeight=399&amp;originWidth=800&amp;size=0&amp;status=done&amp;style=none&amp;width=140" alt="" loading="lazy"></p>
<p><a name="3vGI2"></a></p>
<h1 id="6-给定一个整数数组找出具有最大和的子数组返回最大和">6、给定一个整数数组，找出具有最大和的子数组，返回最大和</h1>
<pre><code class="language-javascript">/**
 * 给定一个整数数组
 * 找出具有最大和的连续子数组
 * 返回最大和
 */
console.log('进入了js文件');


const arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]

function maxSum(arr) {

  let sum = 0
  let max = 0

  for (let i = 0, len = arr.length; i &lt; len; i++) {
    // 数组中的每一项在此遍历
    // 从1到最后依次累加
    // arr[i]依次为 -2, 1, -3, 4
    sum += arr[i]
    console.log(sum, i, arr[i]);
    
    if (max &lt; sum) {
      // 最大值默认为0，如果最大值比现有和小了，让最大值等于现有和
      max = sum
    }
    if (sum &lt; 0) {
      // 如果sum的值为负了，说明前面的累加并非最佳方案，放弃前面，去后面寻找，让sum值重新为0
      sum = 0
    }
  }
  return max
}

console.log(maxSum([1, -2, 3, -4, -5]));
</code></pre>
<p><a name="BHwJJ"></a></p>
<h1 id="7-实现一个基本的promise">7、实现一个基本的promise</h1>
<hr>
<ul>
<li>分析：一个基本的promise，是一个类，实例化的时候接收一个回调函数，这个函数中有两个参数分别为resolve和reject</li>
<li>用法：需要考虑到会在异步函数中进行resolve方法，所以需要管理成功态回调函数数组和失败态回调函数数组</li>
</ul>
<pre><code class="language-javascript">const promise = new Promise((resolve, reject) =&gt; {
	setTimeout(() =&gt; {
  	resolve('ok')
  }, 1000)
})
</code></pre>
<pre><code class="language-javascript">class MyPromise {
  constructor(fn) {
    this.status = 'pending'
    this.value = undefined
    this.reason = undefined

    // 保存异步执行过程中的回调函数数组
    this.resolvedCallbacks = []
    this.rejectedCallbacks = []

    let resolve = value =&gt; {
      if(this.status === 'pending') {
        this.status = 'fulfilled'
        this.value = value
        this.resolvedCallbacks.map(cb =&gt; cb(this.value))
      }
    }

    let reject = reason =&gt; {
      if(this.status === 'pending') {
        this.staus = 'rejected'
        this.reason = reason
        this.rejectedCallbacks.map(cb =&gt; cb(this.reason))
      }
    }
    
    try {
      fn(resolve, reject)
    } catch (err) {
      reject(err)
    }
  }

  // then方法实现
  then(onFulfilled, onRejected) {
    if(this.status === 'pending') {
      this.resolvedCallbacks.push(onFulfilled)
      this.rejectedCallbacks.push(onRejected)
    }
    if(this.status === 'fulfilled') {
      onFulfilled(this.value)
    }
    if(this.status === 'rejected') {
      onRejected(this.reason)
    }
  }
}

const myPromise = new MyPromise((res, rej) =&gt; {
  setTimeout(() =&gt; {
    res('ok123')
  }, 500)
}).then(value =&gt; {
  console.log(value);
  
}, reason =&gt; {
  console.log(reason);
})


</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/513194/1593237993358-25c33b75-d833-4f5a-a722-30041eec8ea9.png#align=left&amp;display=inline&amp;height=114&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=114&amp;originWidth=422&amp;size=37886&amp;status=done&amp;style=none&amp;width=422" alt="image.png" loading="lazy"><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/513194/1593238548031-b15bfb5f-13df-4bfa-a711-88ea1d018e7f.png#align=left&amp;display=inline&amp;height=244&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=244&amp;originWidth=425&amp;size=113891&amp;status=done&amp;style=none&amp;width=425" alt="image.png" loading="lazy"><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/513194/1593238617376-45f51fef-ccbe-4528-9e96-c02dcfb9e654.png#align=left&amp;display=inline&amp;height=582&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=582&amp;originWidth=576&amp;size=302789&amp;status=done&amp;style=none&amp;width=576" alt="image.png" loading="lazy"></p>
<ul>
<li>实例化过程中用到异步本身，需要setTimeout</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://cdn.nlark.com/yuque/0/2020/png/513194/1593241163054-c00c45ff-b59e-4a42-bb7a-a4be274e2963.png#align=left&amp;display=inline&amp;height=567&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=567&amp;originWidth=602&amp;size=334364&amp;status=done&amp;style=none&amp;width=602" alt="image.png" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Orime112.github.io/post/hello-gridea/</id>
        <link href="https://Orime112.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>